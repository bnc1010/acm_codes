#include<bits/stdc++.h>
using namespace std;
const int N=1000005;
int tree[N*4],buff[N*4];

void pushdown(int l,int r,int rt)
{
    if(l<r)
    {
        buff[rt<<1]+=buff[rt];
        buff[rt<<1|1]+=buff[rt];
        tree[rt<<1]+=buff[rt];
        tree[rt<<1|1]+=buff[rt];
    }
    buff[rt]=0;
}

int query(int l,int r,int x,int y,int rt)
{
    if(r==y&&l==x)
    {
        return tree[rt];
    }
    pushdown(l,r,rt);
    int mid=(l+r)>>1;
    if(x>mid)return query(mid+1,r,x,y,rt<<1|1);
    else if(y<=mid)return query(l,mid,x,y,rt<<1);
    else return max(query(mid+1,r,mid+1,y,rt<<1|1),query(l,mid,x,mid,rt<<1));
}

void add(int l,int r,int rt,int x,int y,int w)
{
    if(r<x||l>y)return;
    if(r==y&&l==x)
    {
        buff[rt]+=w;
        tree[rt]+=w;
        return;
    }
    pushdown(l,r,rt);
    int mid=(l+r)>>1;
    if(x>mid)add(mid+1,r,rt<<1|1,x,y,w);
    else if(y<=mid)add(l,mid,rt<<1,x,y,w);
    else add(mid+1,r,rt<<1|1,mid+1,y,w),add(l,mid,rt<<1,x,mid,w);
    tree[rt]=max(tree[rt<<1|1],tree[rt<<1]);
}

int main()
{
    int t,ca=0;
    scanf("%d",&t);
    while(t--)
    {
        printf("Case %d:\n",++ca);
        memset(tree,0,sizeof(tree));
        memset(buff,0,sizeof(buff));
        int k,q,x,y;
        scanf("%d%d",&k,&q);
        int cnt=1;
        for(int i=1;i<=q;i++)
        {
            scanf("%d%d",&x,&y);
            int num=query(1,1000000,x,y-1,1);
            if(num<k)
            {
                add(1,1000000,1,x,y-1,cnt);
                printf("%d ",i);
            }
        }
        printf("\n\n");
    }
}
