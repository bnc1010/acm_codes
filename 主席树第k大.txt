#include<stdio.h>
#include<algorithm>
#include<map>
using namespace std;
#define N 100005
int num[N],ls[N];
int root[N];
int tsize[N*25],lchild[N*25],rchild[N*25];
int tot;


void update(int last,int cur,int l,int r,int k)
{
    tsize[cur]=tsize[last]+1;
    lchild[cur]=lchild[last];
    rchild[cur]=rchild[last];
    if(l==r)return;
    int mid=(l+r)>>1;
    if(k<=mid)update(lchild[last],lchild[cur]=++tot,l,mid,k);
    else update(rchild[last],rchild[cur]=++tot,mid+1,r,k);
}

int query(int last,int cur,int L,int R,int k)
{
    if(L==R)return L;
    int mid=(L+R)>>1;
    int lson=tsize[lchild[cur]]-tsize[lchild[last]];
    if(lson>=k)return query(lchild[last],lchild[cur],L,mid,k);
    else return query(rchild[last],rchild[cur],mid+1,R,k-lson);
}


int main()
{
    int t;
    scanf("%d",&t);
    while(t--)
    {
        int n,m;
        scanf("%d%d",&n,&m);
        for(int i=1;i<=n;i++)
            scanf("%d",&num[i]),ls[i]=num[i];
        sort(num+1,num+1+n);
        int sum=unique(num+1,num+1+n)-num-1;
        tot=0;
        for(int i=1;i<=n;i++)update(root[i-1],root[i]=++tot,1,sum,lower_bound(num+1,num+1+sum,ls[i])-num);
        int l,r,k;
        for(int i=1;i<=m;i++)
        {
            scanf("%d%d%d",&l,&r,&k);
            printf("%d\n",num[query(root[l-1],root[r],1,sum,k)]);
        }
    }
}