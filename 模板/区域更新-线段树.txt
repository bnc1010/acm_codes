#include <stdio.h>
#include <algorithm>
using namespace std;
typedef __int64 ll;
#define lson l , m , rt << 1
#define rson m + 1 , r , rt << 1 | 1
const int maxn = 300000;
char str[10];
struct node{
    int l, r;
    int add;//延迟更新标记 
     int sum;
}tree[(maxn<<2)+10];
int a[maxn];
void pushup(int rt) {
    if(tree[rt].l==tree[rt].r) return ;
    tree[rt].sum = (tree[rt<<1].sum+tree[rt<<1|1].sum);
    return;    
}
void pushdown(int rt){
    if(tree[rt].l==tree[rt].r) return;
    if(tree[rt].add==-1) return;
    tree[rt<<1].add = tree[rt<<1|1].add = tree[rt].add;
    tree[rt<<1].sum = (tree[rt<<1].r - tree[rt<<1].l + 1) * tree[rt].add;
    tree[rt<<1|1].sum = (tree[rt<<1|1].r - tree[rt<<1|1].l + 1) * tree[rt].add;
    tree[rt].add = -1;
}
void build(int l,int r,int rt) {
    tree[rt].l = l;
    tree[rt].r = r;
    tree[rt].sum = 1;
    tree[rt].add = -1;
    if (l == r) {
        tree[rt].sum = 1;
        return;
    }
    int m = (l + r) >> 1;
    build(lson);
    build(rson);
    pushup(rt);
    return;
}
void update(int l,int r,int z,int rt){
    if(l==tree[rt].l && r==tree[rt].r){
        tree[rt].sum = (tree[rt].r - tree[rt].l + 1) * z;
        tree[rt].add = z;
        return;
    }
    pushdown(rt);
    int m = tree[rt].l + tree[rt].r>>1;
    if(r <= m) update(l,r,z,rt<<1);
    else if(l >m)update(l,r,z,rt<<1|1);
    else{
        update(l,m,z,rt<<1);
        update(m+1,r,z,rt<<1|1);
    }
    pushup(rt);
    return ;
}

ll query(int l,int r,int rt){
    if(tree[rt].l == l&&r == tree[rt].r ){
        return tree[rt].sum;
    }
    pushdown(rt);
    int m = tree[rt].l+tree[rt].r>>1;
    if(r <= m) return query(l,r,rt<<1);
    else if(l > m) return query(l,r,rt<<1|1);
    else return (query(l,m,rt<<1)+query(m+1,r,rt<<1|1));
}



int main(){
    int n, m,t;
    scanf("%d", &t);
    int cas = 1;
    while(t--){
        scanf("%d%d", &n, &m);
        build(1,n,1);
        while(m--){
            int L, R, Z;
            scanf("%d%d%d", &L, &R, &Z);
            update(L,R,Z,1);
        }
        printf("Case %d: ",cas++);
        printf("The total value of the hook is %d.\n",query(1,n,1));
    }
    return 0;


}