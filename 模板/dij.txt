#include<cstdio>
#include<string>
#include<map>
#include<algorithm>
using namespace std;
#define INF 0x3f3f3f3f
#define Max 155

int dist[Max], maps[Max][Max];
int s[Max];

void Dijkstra(int n,int x)
{   
    int mindis,u;
    for(int i=1; i <= n; i++)
    {  
        dist[i]= maps[x][i];
        s[i]=0;    
    }       
    s[x]= 1;
    for(int i = 1;i <= n;i++)
    {
          mindis=INF;
         u=-1;
           for(int j=1;j<=n;j++)  
           {
           if(s[j]!=1 && dist[j]<mindis)
           {    
                   u=j;
                   mindis = dist[j];
           }
        }
        if(mindis==INF) break;
          s[u]=1;
         for(int j=1;j<=n;j++)
             if(s[j]!=1 && dist[u]+maps[u][j]<dist[j]&&maps[u][j]<INF)
                   dist[j]=dist[u]+maps[u][j];
    }
}

int main()
{
    int num, count;
    char s[32], e[32];
    char u[32], v[32];
    int w;
    map<string, int>mp;
    while(scanf("%d", &num), num != -1)
    {
        mp.clear();
        memset(maps, INF, sizeof(maps));
        count = 3;
        scanf("%s%s", s, e);
        mp[s] = 1;
        mp[e] = 2;
        for(int i = 1; i <= num; ++i)
        {
            scanf("%s%s%d", u, v, &w);
            if(!mp[u])
                mp[u] = count++;
            if(!mp[v])
                mp[v] = count++;
            maps[mp[u]][mp[v]] = maps[mp[v]][mp[u]] = w;
        }
        if(strcmp(s, e) == 0)
        {
            printf("0\n");
            continue;
        }
        Dijkstra(count - 1, 1);
        if(dist[2] == INF)
            printf("-1\n");
        else
            printf("%d\n", dist[2]);
    }
    return 0;
}
