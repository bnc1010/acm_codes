#include <stdio.h>
#include <string.h>
#include <queue>
using namespace std;
int sx, sy;
int ex, ey;
int n, m, t;
int dx[] = {1,-1,0,0};
int dy[] = {0,0,1,-1};
char maps[25][25];
int vis[1<<12][25][25];
struct node{
    int x;
    int y;
    int t;
    int state;
};
int key(int x,int y,int state)
{
    if(maps[x][y]>='A' && maps[x][y]<='J')
    {
        int temp = maps[x][y] - 'A' + 1;
        if(((1<<temp) & state)==0)
            return 0;
        return 1;    
    }
    return 1;
}
int judge(int x,int y,int state)
{
    if(x < 1 || x > n || y < 1 || y > m||maps[x][y]=='*'||!key(x,y,state)||vis[state][x][y])
        return 0;
    return 1;    
}

int bfs()
{
    node now, next;
    queue<node>qu;
    while(!qu.empty()) qu.pop();
    now.x = sx;
    now.y = sy;
    now.t = 0;
    now.state = 0;
    qu.push(now);
    vis[now.state][now.x][now.y] = 1;
    while(!qu.empty())
    {
        now = qu.front();
        qu.pop();

        if(now.t >= t)
        {
            return -1;
        }
        if(now.x==ex &&now.y==ey)
        {
            return now.t;
        }

        for(int i = 0;i < 4;i++)
        {
            next.x = now.x + dx[i];
            next.y = now.y + dy[i];
            if(maps[next.x][next.y]>='a' && maps[next.x][next.y]<='j')
            {
                int rem = (maps[next.x][next.y] -'a' + 1);
                next.state = (now.state|(1<<rem));
                next.t = now.t + 1;
                vis[next.state][next.x][next.y] = 1;
                qu.push(next);
            }
            else if(judge(next.x,next.y,now.state))
            {
                next.t = now.t + 1;
                next.state = now.state;
                vis[now.state][next.x][next.y] = 1;
                qu.push(next);
            }
            
        }
        
    }
    return -1;
}
int main()
{
    while(~scanf("%d%d%d", &n, &m, &t))
    {
        char str[25];
        memset(vis,0,sizeof(vis));
        for(int i = 1;i <= n;i++)
        {
            scanf("%s", str);
            for(int j = 1;j <= m;j++)
            {
                maps[i][j] = str[j-1];
                if(maps[i][j]=='@')
                {
                    sx = i;
                    sy = j;
                    maps[i][j] ='.';
                }
                if(maps[i][j]=='^')
                {
                    ex = i;
                    ey = j;
                }
            }
        }
        /*
        for(int i = 1;i <= n;i++)
        {
            for(int j = 1;j <= m;j++)
            {
                printf("%c",maps[i][j]);
            }
            printf("\n");
        }*/
        int ans = bfs();
        printf("%d\n",ans);
        
    }
}